# every job should (transitively) inherit from this job template
.ctl:job_base:
  only:
    changes:
      - "namib_controller/**/*"
  variables:
    DATABASE_URL: sqlite:/tmp/db.sqlite
  before_script:
    - git config --global credential.helper store
    - echo "https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.informatik.uni-bremen.de" > ~/.git-credentials
    - export CARGO_HOME=${CI_PROJECT_DIR}/.cargo
    - rustc --version
    - cargo --version
    - cargo install --git https://github.com/launchbadge/sqlx sqlx-cli # TODO move to build image
    - export PATH=$PATH:$CARGO_HOME/bin
    - ./namib_controller/scripts/recreate_db.sh

ctl:build:
  extends: .ctl:job_base
  stage: build
  script:
    - cargo build -p namib_controller

ctl:test:
  extends: .ctl:job_base
  stage: test
  script:
    - cargo test -p namib_controller

ctl:test-postgres:
  extends: .ctl:job_base
  stage: test
  services:
    - postgres
  variables:
    MIGRATION_DIRECTORY: namib_controller/migrations/postgres
    POSTGRES_USER: namib
    POSTGRES_PASSWORD: namib
    DATABASE_URL: postgres://namib:namib@postgres/namib_mud_controller
  script:
    - cargo test -p namib_controller --no-default-features --features postgres

ctl:warnings:
  extends: .ctl:job_base
  stage: test
  script:
    - cargo clippy -p namib_controller -- -D warnings
  retry: 0
  allow_failure: true

ctl:formatting:
  extends: .ctl:job_base
  stage: test
  script:
    - cargo fmt -p namib_controller -- --check

.ctl_test_stage:
  - ctl:test
  - ctl:test-postgres
  - ctl:formatting

ctl:docs:
  extends: .ctl:job_base
  stage: docs
  needs:
    - ctl:build
  except:
    - main
  script:
    - cargo doc -p namib_controller --no-deps --target-dir target-doc-ctrl
  artifacts:
    paths:
      - target-doc-ctrl/doc
    expire_in: 7 days

ctl:pages:
  extends: .ctl:job_base
  stage: docs
  needs: !reference [.ctl_test_stage]
  only:
    refs:
      - main
  script:
    - cargo doc -p namib_controller --no-deps --target-dir target-doc-ctrl
    - mv target-doc-ctrl/doc public
    - echo '<meta http-equiv="refresh" content="0; url=namib_mud_controller/index.html">' > public/index.html
  artifacts:
    paths:
      - public
    expire_in: 7 days

ctl:build-release:
  extends: .ctl:build-release-base
  variables:
    FEATURES: ""

ctl:build-release-postgres:
  extends: .ctl:build-release-base
  services:
    - postgres
  variables:
    FEATURES: "--no-default-features --features postgres"
    MIGRATION_DIRECTORY: migrations/postgres
    POSTGRES_USER: namib
    POSTGRES_PASSWORD: namib
    DATABASE_URL: postgres://namib:namib@postgres/namib_mud_controller

.ctl:build-release-base:
  extends: .ctl:job_base
  stage: release
  needs: []
  only:
    refs:
      - main
  cache:
    key: "build-release"
  script:
    - cargo install -p namib_controller --root ./namib_controller/install --path . $FEATURES
    # download namib frontend
    - cd namib_controller
    - ./scripts/download_namib_frontend.sh
    - cd ..
    # decrypt ca secret
    - gpg --import $GPG_PRIVATE_KEY
    - git secret reveal
    - cd certs
    - ./gen_server_cert.sh namib-ca
  artifacts:
    paths:
      - namib_controller/install/bin
      - namib_controller/certs
      - namib_controller/static
      - namib_controller/db.sqlite

.ctl:build-release-debian:
  extends: .ctl:job_base
  stage: release
  needs: []
  only:
    refs:
      - main
      - tags
  services:
    - postgres
  cache:
    key: "build-release"
  variables:
    MIGRATION_DIRECTORY: migrations/postgres
    POSTGRES_USER: namib
    POSTGRES_PASSWORD: namib
    DATABASE_URL: postgres://namib:namib@postgres/namib_mud_controller
  script:
    - rustup target add $RUST_TRIPLE
    - cargo sqlx prepare -- --no-default-features --features postgres --lib
    - mv sqlx-data.json debian/sqlx-data.postgres.json
    - export DATABASE_URL=sqlite:db.sqlite
    - export MIGRATION_DIRECTORY=migrations/sqlite
    - ./scripts/recreate_db.sh
    - cargo sqlx prepare -- --lib
    - mv sqlx-data.json debian/sqlx-data.sqlite.json
    - dpkg --add-architecture $DEBIAN_ARCH
    - apt-get update
    - apt-get install git-secret build-essential crossbuild-essential-$DEBIAN_ARCH -y
    - apt-get build-dep -a $DEBIAN_ARCH . -y
    # download namib frontend
    - cd namib_controller
    - ./scripts/download_namib_frontend.sh
    - cd ..
    # decrypt ca secret
    - gpg --import $GPG_PRIVATE_KEY
    - cd ..
    - git init && git remote add origin https://gitlab.informatik.uni-bremen.de/namib/mud-controller-enforcer/controller-enforcer-metaproject.git
    - git fetch origin && git checkout origin/master -f
    - git secret reveal
    - cd certs
    - ./gen_server_cert.sh namib-ca
    - cd ..
    - git secret hide
    - mv Cargo.toml Cargo.toml.thisisnotaworkspace
    - cd namib_mud_controller
    - dpkg-buildpackage --no-pre-clean --no-post-clean --host-arch $DEBIAN_ARCH
    - mkdir output
    - mv ../namib-mud-controller*.deb output/
    - mv ../namib-mud-controller*.buildinfo output/ || true
    - mv ../namib-mud-controller*.changes output/ || true
    - mv ../namib-mud-controller*.tar.gz output/ || true
    - mv ../namib-mud-controller*.dsc output/ || true
  artifacts:
    paths:
      - output

# TODO lets ignore debian for now until the basic build procedure works.
.ctl:build-release-debian-amd64:
  extends: .ctl:build-release-debian
  variables:
    DEBIAN_ARCH: amd64
    RUST_TRIPLE: x86_64-unknown-linux-gnu

.ctl:build-release-debian-arm64:
  extends: .ctl:build-release-debian
  variables:
    DEBIAN_ARCH: arm64
    RUST_TRIPLE: aarch64-unknown-linux-gnu

.ctl:build-release-debian-armhf:
  extends: .ctl:build-release-debian
  variables:
    DEBIAN_ARCH: armhf
    RUST_TRIPLE: armv7-unknown-linux-gnueabihf

# TODO migrate to new monorepo on GitHub
.ctl:publish-github:
  extends: .ctl:job_base
  image: alpine:3
  stage: gh-release
  needs:
    - "ctl:build-release-debian-amd64"
    - "ctl:build-release-debian-arm64"
    - "ctl:build-release-debian-armhf"
    - !reference [.ctl_test_stage]
  only:
    refs:
      - tags
  before_script:
    - apk add --no-cache wget tar
    - wget -qO- https://github.com/cli/cli/releases/download/v1.10.3/gh_1.10.3_linux_amd64.tar.gz | tar -xvz --transform 's|^gh_1.10.3_linux_amd64/bin/||' -C /usr/local/bin gh_1.10.3_linux_amd64/bin
    - gh auth login --with-token < $GITHUB_RELEASE_TOKEN
  script:
    - gh release create $CI_COMMIT_TAG output/namib-mud-controller*.deb -R namib-project/namib_mud_controller

# TODO get basic builds running first
.ctl:create-docker:
  extends: .ctl:job_base
  stage: docker
  needs:
    - ctl:build-release
    - !reference [.ctl_test_stage]
  cache: {}
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [ "" ]
  only:
    refs:
      - main
  before_script: []
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --cache=true --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/docker/Dockerfile --destination $CI_REGISTRY_IMAGE:latest

# TODO get basic builds running first
.ctl:create-docker-postgres:
  extends: .ctl:job_base
  stage: docker
  needs:
    - ctl:build-release-postgres
    - !reference [.ctl_test_stage]
  cache: {}
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [ "" ]
  only:
    refs:
      - main
  before_script: []
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --cache=true --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/docker/Dockerfile --destination $CI_REGISTRY_IMAGE:postgres
