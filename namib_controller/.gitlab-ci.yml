include:
  - local: //.common.yml

# every job should (transitively) inherit from this job template
.ctl:job_base:
  rules:
    - !reference [.on_tags]
    - !reference [.on_default_branch]
    - &on_controller_change changes: [ "namib_controller/**/*" ]
    - when: manual
      allow_failure: true
  cache: &job_base_cache_settings
    - !reference [.pkg_cache]
    - &ctl_cache
      key: "ctl-native-$CI_COMMIT_REF_SLUG"
      paths:
        - target/*/deps/
        - target/*/incremental/
        - target/*/build/
      policy: pull
  variables:
    DATABASE_URL: sqlite:/tmp/db.sqlite
  before_script: &ctl_before_script
    - git config --global credential.helper store
    - echo "https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.informatik.uni-bremen.de" > ~/.git-credentials
    - export CARGO_HOME=${CI_PROJECT_DIR}/.cargo
    - rustc --version
    - cargo --version
    - export PATH=$PATH:$CARGO_HOME/bin
    - ./namib_controller/scripts/recreate_db.sh

.postgres_vars: &ctl_postgres_vars
  MIGRATION_DIRECTORY: namib_controller/migrations/postgres
  POSTGRES_USER: namib
  POSTGRES_PASSWORD: namib
  DATABASE_URL: postgres://namib:namib@postgres/namib_mud_controller


ctl:build:
  extends: .ctl:job_base
  stage: build
  cache:
    - !reference [.pkg_cache]
    - <<: *ctl_cache
      policy: pull-push
  script:
    - if [ -z "$CI_COMMIT_TAG" ]; then cargo build -p namib_controller --release; else cargo build -p namib_controller; fi
  artifacts:
    paths:
      - "target/*/namib_controller"


ctl:build_postgres:
  extends: .ctl:job_base
  stage: build
  cache:
    - <<: *ctl_cache
      key: "ctl-postgres-native-$CI_COMMIT_REF_SLUG"
      policy: pull-push
  script:
    - if [ -z "$CI_COMMIT_TAG" ]; then cargo build -p namib_controller --release; else cargo build -p namib_controller; fi
  artifacts:
    paths:
      - "target/*/namib_controller"


.ctl:test_stage_job_base:
  extends: .ctl:job_base
  stage: test
  needs:
    - job: ctl:build
      artifacts: false

.ctl:test_stage_job_base_postgres:
  extends: .ctl:test_stage_job_base
  cache:
    - <<: *ctl_cache
      key: "ctl-postgres-native-$CI_COMMIT_REF_SLUG"
  services:
    - postgres
  variables:
    <<: *ctl_postgres_vars

ctl:test:
  extends: .ctl:test_stage_job_base
  script:
    - cargo test -p namib_controller -- -Z unstable-options --format json --report-time | tee results.json
    - cat results.json | cargo2junit > target/controller-test-results.xml
  artifacts:
    reports:
      junit: target/controller-test-results.xml

ctl:test_postgres:
  extends: .ctl:test_stage_job_base_postgres
  script:
    - cargo test -p namib_controller --no-default-features --features postgres -- -Z unstable-options --format json --report-time | tee results.json
    - cat results.json | cargo2junit > target/controller-test-results_postgres.xml
  artifacts:
    reports:
      junit: target/controller-test-results_postgres.xml

ctl:warnings:
  extends: .ctl:test_stage_job_base
  script:
    - cargo clippy -p namib_controller -- -D warnings
  after_script:
    - cargo clippy -p namib_controller --message-format=json | gitlab-clippy > target/controller-code-quality.json
  artifacts:
    reports:
      codequality: target/controller-code-quality.json
  allow_failure: true

ctl:formatting:
  extends: .ctl:test_stage_job_base
  script:
    - cargo fmt -p namib_controller -- --check

.ctl:release-bundle_base:
  extends: .ctl:job_base
  stage: package
  rules:
    - !reference [.on_tags]
    - !reference [.on_default_branch]
    - when: manual
      allow_failure: true
  script:
    - cargo install --path namib_controller --bin namib_controller --root ./namib_controller/install $FEATURES
    # download namib frontend
    - cd namib_controller
    - ./scripts/download_namib_frontend.sh
    - cd ..
    # decrypt ca secret
    - gpg --import $GPG_PRIVATE_KEY
    - git secret reveal
    - cd certs
    - ./gen_server_cert.sh namib-ca
  artifacts:
    paths:
      - namib_controller/install/bin
      - namib_controller/certs
      - namib_controller/static
      - namib_controller/db.sqlite


ctl:release-bundle:
  extends: .ctl:release-bundle_base
  needs:
    - job: ctl:build
      artifacts: false
  variables:
    FEATURES: ""

ctl:release-bundle_postgres:
  extends: .ctl:release-bundle_base
  services:
    - postgres
  needs:
    - job: ctl:build_postgres
      artifacts: false
  variables:
    FEATURES: "--no-default-features --features postgres"
    <<: *ctl_postgres_vars

.ctl:debian-package:
  extends: .ctl:job_base
  needs:
    - job: ctl:build
      artifacts: false
    - job: ctl:build_postgres
      artifacts: false
  stage: package
  rules:
    - !reference [.on_tags]
    - !reference [.on_default_branch]
    - when: manual
      allow_failure: true
  services:
    - postgres
  cache:
    key: "build-release"
  variables:
    MIGRATION_DIRECTORY: namib_controller/migrations/postgres
    POSTGRES_USER: namib
    POSTGRES_PASSWORD: namib
    DATABASE_URL: postgres://namib:namib@postgres/namib_mud_controller
  image: gitlab.informatik.uni-bremen.de:5005/namib-master/ci-docker-images/controller/debian_pkgbuild:bullseye-$DEBIAN_ARCH
  before_script:
    - *ctl_before_script
    - cd namib_controller
    - apt-get update && apt-get build-dep -a $DEBIAN_ARCH . -y
    - cd ..
    - cargo sqlx prepare -- --no-default-features --features postgres -p namib_controller --lib
    - mv sqlx-data.json namib_controller/debian/sqlx-data.postgres.json
    - export DATABASE_URL=sqlite:/tmp/db.sqlite
    - export MIGRATION_DIRECTORY=namib_controller/migrations/sqlite
    - ./namib_controller/scripts/recreate_db.sh
    - cargo sqlx prepare -- -p namib_controller --lib
    - mv sqlx-data.json namib_controller/debian/sqlx-data.sqlite.json
  script:
    # download namib frontend
    - cd namib_controller
    - ./scripts/download_namib_frontend.sh
    - cd ..
    # decrypt ca secret
    - gpg --import $GPG_PRIVATE_KEY
    - git secret reveal
    - cd certs
    - ./gen_server_cert.sh namib-ca
    - cd ..
    - git secret hide
    # - mv Cargo.toml Cargo.toml.thisisnotaworkspace
    - cd namib_controller
    - dpkg-buildpackage --no-pre-clean --no-post-clean --host-arch $DEBIAN_ARCH
    - mkdir output
    - mv ../namib-mud-controller*.deb output/
    - mv ../namib-mud-controller*.buildinfo output/ || true
    - mv ../namib-mud-controller*.changes output/ || true
    - mv ../namib-mud-controller*.tar.gz output/ || true
    - mv ../namib-mud-controller*.dsc output/ || true
  artifacts:
    paths:
      - namib_controller/output


ctl:debian-package_amd64:
  extends: .ctl:debian-package
  variables:
    DEBIAN_ARCH: amd64
    RUST_TRIPLE: x86_64-unknown-linux-gnu

ctl:debian-package_arm64:
  extends: .ctl:debian-package
  variables:
    DEBIAN_ARCH: arm64
    RUST_TRIPLE: aarch64-unknown-linux-gnu

ctl:debian-package_armhf:
  extends: .ctl:debian-package
  variables:
    DEBIAN_ARCH: armhf
    RUST_TRIPLE: armv7-unknown-linux-gnueabihf

# TODO migrate to new monorepo on GitHub
.ctl:publish-github:
  extends: .ctl:job_base
  image: alpine:3
  stage: gh-release
  needs:
    - "ctl:debian-package_amd64"
    - "ctl:debian-package_arm64"
    - "ctl:debian-package_armhf"
  only:
    refs:
      - tags
  before_script:
    - apk add --no-cache wget tar
    - wget -qO- https://github.com/cli/cli/releases/download/v1.10.3/gh_1.10.3_linux_amd64.tar.gz | tar -xvz --transform 's|^gh_1.10.3_linux_amd64/bin/||' -C /usr/local/bin gh_1.10.3_linux_amd64/bin
    - gh auth login --with-token < $GITHUB_RELEASE_TOKEN
  script:
    - gh release create $CI_COMMIT_TAG output/namib-mud-controller*.deb -R namib-project/namib_mud_controller

.ctl:controller_docker_job_base:
  stage: image
  tags:
    - docker
    - privileged
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [ "" ]
  rules:
    - !reference [.on_default_branch]
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --cache=true --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/namib_controller/docker/Dockerfile --whitelist-var-run=false --destination $CI_REGISTRY_IMAGE/controller:$CTL_TAG


ctl:controller-docker:
  extends: .ctl:controller_docker_job_base
  needs:
    - ctl:release-bundle
  variables:
    CTL_TAG: latest

ctl:controller-docker_postgres:
  extends: .ctl:controller_docker_job_base
  needs:
    - ctl:release-bundle_postgres
  variables:
    CTL_TAG: postgres