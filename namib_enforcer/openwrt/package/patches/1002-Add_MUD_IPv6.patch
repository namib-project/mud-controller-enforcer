Index: src/dhcp6-protocol.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- a/src/dhcp6-protocol.h	(revision bf1071d1ed3d1f729371172ec775b26e5b0efd3d)
+++ b/src/dhcp6-protocol.h	(revision 3ff0ebbd818139a37dd1c7823aef5f374f6c4edc)
@@ -61,6 +61,7 @@
 #define OPTION6_FQDN            39
 #define OPTION6_NTP_SERVER      56
 #define OPTION6_CLIENT_MAC      79
+#define OPTION6_MUD_URL         112
 
 #define NTP_SUBOPTION_SRV_ADDR  1
 #define NTP_SUBOPTION_MC_ADDR   2
Index: src/helper.c
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- a/src/helper.c	(revision bf1071d1ed3d1f729371172ec775b26e5b0efd3d)
+++ b/src/helper.c	(revision 3ff0ebbd818139a37dd1c7823aef5f374f6c4edc)
@@ -614,7 +614,10 @@
 	    buf = grab_extradata(buf, end, "DNSMASQ_RELAY_ADDRESS", &err);
 	  else 
 	    my_setenv("DNSMASQ_RELAY_ADDRESS", data.giaddr.s_addr != 0 ? inet_ntoa(data.giaddr) : NULL, &err); 
-	  
+
+	  if (is6)
+	    buf = grab_extradata(buf, end, "DNSMASQ_MUD_URL", &err);
+
 	  for (i = 0; buf; i++)
 	    {
 	      sprintf(daemon->dhcp_buff2, "DNSMASQ_USER_CLASS%i", i);
Index: src/rfc3315.c
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- a/src/rfc3315.c	(revision bf1071d1ed3d1f729371172ec775b26e5b0efd3d)
+++ b/src/rfc3315.c	(revision 3ff0ebbd818139a37dd1c7823aef5f374f6c4edc)
@@ -1903,6 +1903,16 @@
 	    inet_ntop(AF_INET6, state->link_address, daemon->addrbuff, ADDRSTRLEN);
 	  
 	  lease_add_extradata(lease, (unsigned char *)daemon->addrbuff, state->link_address ? strlen(daemon->addrbuff) : 0, 0);
+
+	  void *mud_opt;
+	  if ((mud_opt = opt6_find(state->packet_options, state->end, OPTION6_MUD_URL, 1)))
+	    {
+	      lease_add_extradata(lease, opt6_ptr(mud_opt, 0), opt6_len(mud_opt), NULL);
+	    }
+	  else
+        {
+	      lease_add_extradata(lease, NULL, 0, 0);
+        }
 	  
 	  if ((class_opt = opt6_find(state->packet_options, state->end, OPTION6_USER_CLASS, 2)))
 	    {
