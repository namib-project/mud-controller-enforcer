stages:
  - build
  - test
  - docs
  - binary
  - imagebuilder

image: rust:latest

cache:
  paths:
    - .cargo/

before_script:
  - git config --global credential.helper store
  - echo "https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.informatik.uni-bremen.de" > ~/.git-credentials
  - apt-get update && apt-get install -y libavahi-compat-libdnssd-dev libnftnl-dev libmnl-dev cmake clang
  - export CARGO_HOME=${CI_PROJECT_DIR}/.cargo
  - wget -o /dev/null https://github.com/mozilla/sccache/releases/download/v0.2.15/sccache-v0.2.15-x86_64-unknown-linux-musl.tar.gz
  - tar -xzf sccache-v0.2.15-x86_64-unknown-linux-musl.tar.gz
  - chmod +x sccache-v0.2.15-x86_64-unknown-linux-musl/sccache
  - export RUSTC_WRAPPER=${CI_PROJECT_DIR}/sccache-v0.2.15-x86_64-unknown-linux-musl/sccache
  - export SCCACHE_DIR=${CI_PROJECT_DIR}/.cargo/sccache
  - rustc --version
  - cargo --version

default:
  tags:
    - linux
    - docker

build:
  stage: build
  script:
    - cargo build

test:
  stage: test
  script:
    - cargo test --features dnsmasq_hook

warnings:
  stage: test
  script:
    - rustup toolchain install nightly --component clippy --no-self-update
    - cargo +nightly clippy -- -D warnings
  allow_failure: true

formatting:
  stage: test
  script:
    - rustup toolchain install nightly --component rustfmt --no-self-update
    - cargo +nightly fmt -- --check

docs:
  stage: docs
  except:
    - master
  script:
    - cargo doc --no-deps
  artifacts:
    paths:
      - target/doc
    expire_in: 7 days

pages:
  stage: docs
  only:
    - master
  script:
    - cargo doc --no-deps
    - mv target/doc public
    - echo '<meta http-equiv="refresh" content="0; url=namib_enforcer/index.html">' > public/index.html
  artifacts:
    paths:
      - public
    expire_in: 7 days

binary:
  stage: binary
  only:
    - master
  script:
    - cargo build --features="dnsmasq_hook" --release
  artifacts:
    paths:
      - target/release/namib_enforcer
      - target/release/namib_dnsmasq_hook
    expire_in: 7 days

openwrt_package_x86_64:
  extends: .openwrt_package_base
  image: openwrtorg/sdk:x86_64-19.07.7
  variables:
    RUST_TRIPLE: x86_64-unknown-linux-musl

openwrt_package_bcm2708: # raspberry v1
  extends: .openwrt_package_base
  image: openwrtorg/sdk:brcm2708-bcm2708-19.07.7
  variables:
    RUST_TRIPLE: arm-unknown-linux-musleabihf

openwrt_package_bcm2710: # raspberry v3
  extends: .openwrt_package_base
  image: openwrtorg/sdk:brcm2708-bcm2710-19.07.7
  variables:
    RUST_TRIPLE: aarch64-unknown-linux-musl

openwrt_package_bcm2710_snapshot: # raspberry v3
  extends: .openwrt_package_base
  image: openwrtorg/sdk@sha256:6ba8ab7d4e4fa1f1f183fb1ea4dbdd4d6277eb88e2e6fc91b5e2df7feea8edfc # :bcm27xx-bcm2710-snapshot
  variables:
    RUST_TRIPLE: aarch64-unknown-linux-musl

openwrt_package_bcm2711_snapshot: # raspberry v4
  extends: .openwrt_package_base
  image: openwrtorg/sdk@sha256:a99ca882665737bc107a3ae3d93762902d324dad4a39f6793e018f2e65d19817 # :bcm27xx-bcm2711-snapshot
  variables:
    RUST_TRIPLE: aarch64-unknown-linux-musl

.openwrt_package_base:
  stage: binary
  dependencies: [ ]
  cache: { }
  only:
    - master
  before_script:
    # setup https credentials
    - git config --global credential.helper store
    - echo "https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.informatik.uni-bremen.de" > ~/.git-credentials
    # install rust
    - curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --profile minimal -t $RUST_TRIPLE
    - source $HOME/.cargo/env
    # install git-secret & build dependency for bindgen
    - sudo apt-get update && sudo apt-get install -y clang libc6-dev-i386 git-secret --no-install-recommends
    # decrypt ca secret
    - gpg --import $GPG_PRIVATE_KEY
    - cd ..
    - git init && git remote add origin https://gitlab.informatik.uni-bremen.de/namib/mud-controller-enforcer/controller-enforcer-metaproject.git
    - git fetch origin && git checkout origin/master -f
    - git secret reveal
    - cd certs
    - ./gen_client_cert.sh namib-ca
  script:
    - cd /home/build/openwrt
    - ./scripts/feeds update base packages
    - ./scripts/feeds install libavahi-compat-libdnssd libuci openssl libnftnl libmnl
    - mv ${CI_PROJECT_DIR}/openwrt/config.diff .config
    - mv ${CI_PROJECT_DIR}/openwrt ./package/namib
    - mkdir package/namib/src
    - cp -r ${CI_PROJECT_DIR} package/namib/src/namib_enforcer
    - make defconfig
    - make package/namib/compile -j8
  after_script:
    - mkdir ${CI_PROJECT_DIR}/output
    - cp -r /home/build/openwrt/logs/package/namib ${CI_PROJECT_DIR}/output/logs || true
    - cp -r /home/build/openwrt/bin/packages/*/base/namib_0.1.0-*.ipk ${CI_PROJECT_DIR}/output || true
  artifacts:
    paths:
      - output
    when: always

imagebuilder:
  stage: imagebuilder
  only:
    - master
  trigger:
    include:
      - project: namib/mud-controller-enforcer/controller-enforcer-metaproject
        ref: master
        file: .gitlab-ci.imagebuilder.yml
    strategy: depend
