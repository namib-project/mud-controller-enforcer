stages:
  - build
  - test
  - binary
  - gh-release
  - imagebuilder
  - docker
  - docs

include:
  - local: openwrt/package/.gitlab-ci.yml
  - local: openwrt/image/.gitlab-ci.yml

image: rust:latest

cache:
  paths:
    - .cargo/

variables:
  KUBERNETES_CPU_REQUEST: 3
  KUBERNETES_CPU_LIMIT: 5
  KUBERNETES_MEMORY_REQUEST: 2Gi
  KUBERNETES_MEMORY_LIMIT: 4Gi
  FF_USE_LEGACY_KUBERNETES_EXECUTION_STRATEGY: "false"

before_script:
  - git config --global credential.helper store
  - echo "https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.informatik.uni-bremen.de" > ~/.git-credentials
  - apt-get update && apt-get install -y libavahi-compat-libdnssd-dev libnftnl-dev libmnl-dev cmake clang
  - export CARGO_HOME=${CI_PROJECT_DIR}/.cargo
  - wget -o /dev/null https://github.com/mozilla/sccache/releases/download/v0.2.15/sccache-v0.2.15-x86_64-unknown-linux-musl.tar.gz
  - tar -xzf sccache-v0.2.15-x86_64-unknown-linux-musl.tar.gz
  - chmod +x sccache-v0.2.15-x86_64-unknown-linux-musl/sccache
  - export RUSTC_WRAPPER=${CI_PROJECT_DIR}/sccache-v0.2.15-x86_64-unknown-linux-musl/sccache
  - export SCCACHE_DIR=${CI_PROJECT_DIR}/.cargo/sccache
  - rustc --version
  - cargo --version

default:
  tags:
    - linux
    - docker

build:
  stage: build
  script:
    - cargo build

test:
  stage: test
  script:
    - cargo test --features dnsmasq_hook

warnings:
  stage: test
  script:
    - rustup toolchain install nightly --component clippy --no-self-update
    - cargo +nightly clippy -- -D warnings
  allow_failure: true

formatting:
  stage: test
  script:
    - rustup toolchain install nightly --component rustfmt --no-self-update
    - cargo +nightly fmt -- --check

docs:
  stage: docs
  except:
    - master
  script:
    - cargo doc --no-deps
  artifacts:
    paths:
      - target/doc
    expire_in: 7 days

pages:
  stage: docs
  only:
    - master
  script:
    - cargo doc --no-deps
    - mv target/doc public
    - echo '<meta http-equiv="refresh" content="0; url=namib_enforcer/index.html">' > public/index.html
  artifacts:
    paths:
      - public
    expire_in: 7 days

binary:
  stage: binary
  only:
    - master
  script:
    - cargo build --features="dnsmasq_hook" --release
  artifacts:
    paths:
      - target/release/namib_enforcer
      - target/release/namib_dnsmasq_hook
    expire_in: 7 days

publish-github:
  image: alpine:3
  stage: gh-release
  needs:
    - openwrt_package_x86_64
    - openwrt_package_bcm2708
    - openwrt_package_bcm2710
    - openwrt_package_bcm2710_snapshot
    - openwrt_package_bcm2711_snapshot
  only:
    - tags
  before_script:
    - apk add --no-cache wget tar
    - wget -qO- https://github.com/cli/cli/releases/download/v1.10.3/gh_1.10.3_linux_amd64.tar.gz | tar -xvz --transform 's|^gh_1.10.3_linux_amd64/bin/||' -C /usr/local/bin gh_1.10.3_linux_amd64/bin
    - gh auth login --with-token < $GITHUB_RELEASE_TOKEN
  script:
    - gh release create $CI_COMMIT_TAG output/namib_*.ipk output/dnsmasq-full_*.ipk -R namib-project/namib_enforcer
