stages:
  - build
  - test
  - docs
  - binary
  - imagebuilder
  - docker

image: rust:latest

cache:
  paths:
    - .cargo/

before_script:
  - git config --global credential.helper store
  - echo "https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.informatik.uni-bremen.de" > ~/.git-credentials
  - apt-get update && apt-get install -y libavahi-compat-libdnssd-dev libnftnl-dev libmnl-dev cmake clang
  - export CARGO_HOME=${CI_PROJECT_DIR}/.cargo
  - wget -o /dev/null https://github.com/mozilla/sccache/releases/download/v0.2.15/sccache-v0.2.15-x86_64-unknown-linux-musl.tar.gz
  - tar -xzf sccache-v0.2.15-x86_64-unknown-linux-musl.tar.gz
  - chmod +x sccache-v0.2.15-x86_64-unknown-linux-musl/sccache
  - export RUSTC_WRAPPER=${CI_PROJECT_DIR}/sccache-v0.2.15-x86_64-unknown-linux-musl/sccache
  - export SCCACHE_DIR=${CI_PROJECT_DIR}/.cargo/sccache
  - rustc --version
  - cargo --version

default:
  tags:
    - linux
    - docker

build:
  stage: build
  script:
    - cargo build

test:
  stage: test
  script:
    - cargo test --features dnsmasq_hook

warnings:
  stage: test
  script:
    - rustup toolchain install nightly --component clippy --no-self-update
    - cargo +nightly clippy -- -D warnings
  allow_failure: true

formatting:
  stage: test
  script:
    - rustup toolchain install nightly --component rustfmt --no-self-update
    - cargo +nightly fmt -- --check

docs:
  stage: docs
  except:
    - master
  script:
    - cargo doc --no-deps
  artifacts:
    paths:
      - target/doc
    expire_in: 7 days

pages:
  stage: docs
  only:
    - master
  script:
    - cargo doc --no-deps
    - mv target/doc public
    - echo '<meta http-equiv="refresh" content="0; url=namib_enforcer/index.html">' > public/index.html
  artifacts:
    paths:
      - public
    expire_in: 7 days

binary:
  stage: binary
  only:
    - master
  script:
    - cargo build --features="dnsmasq_hook" --release
  artifacts:
    paths:
      - target/release/namib_enforcer
      - target/release/namib_dnsmasq_hook
    expire_in: 7 days

openwrt_package_x86_64:
  extends: .openwrt_package_base
  image: openwrtorg/sdk:x86_64-19.07.7
  variables:
    RUST_TRIPLE: x86_64-unknown-linux-musl

openwrt_package_bcm2708: # raspberry v1
  extends: .openwrt_package_base
  image: openwrtorg/sdk:brcm2708-bcm2708-19.07.7
  variables:
    RUST_TRIPLE: arm-unknown-linux-musleabihf

openwrt_package_bcm2710: # raspberry v3
  extends: .openwrt_package_base
  image: openwrtorg/sdk:brcm2708-bcm2710-19.07.7
  variables:
    RUST_TRIPLE: aarch64-unknown-linux-musl

openwrt_package_bcm2710_snapshot: # raspberry v3
  extends: .openwrt_package_base
  image: openwrtorg/sdk@sha256:d4dcd1b0c0e80030a7989ff02f911b9b0873ea6997288bb6ef16f738892e2d3d # :bcm27xx-bcm2710-21.02-snapshot
  variables:
    RUST_TRIPLE: aarch64-unknown-linux-musl

openwrt_package_bcm2711_snapshot: # raspberry v4
  extends: .openwrt_package_base
  image: openwrtorg/sdk@sha256:2973097d0db2bf533ee075d654d83227bc77e7af530785fe9fe680b2d9b43fa6 # :bcm27xx-bcm2711-21.02-snapshot
  variables:
    RUST_TRIPLE: aarch64-unknown-linux-musl

.openwrt_package_base:
  stage: binary
  dependencies: [ ]
  cache: { }
  only:
    - master
  before_script:
    # setup https credentials
    - git config --global credential.helper store
    - echo "https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.informatik.uni-bremen.de" > ~/.git-credentials
    # install rust
    - curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --profile minimal -t $RUST_TRIPLE
    - source $HOME/.cargo/env
    # install git-secret & build dependency for bindgen
    - sudo apt-get update && sudo apt-get install -y clang libc6-dev-i386 git-secret --no-install-recommends
    # decrypt ca secret
    - gpg --import $GPG_PRIVATE_KEY
    - cd ..
    - git init && git remote add origin https://gitlab.informatik.uni-bremen.de/namib/mud-controller-enforcer/controller-enforcer-metaproject.git
    - git fetch origin && git checkout origin/master -f
    - git secret reveal
    - cd certs
    - ./gen_client_cert.sh namib-ca
  script:
    - cd /home/build/openwrt
    - ./scripts/feeds update base packages
    - ./scripts/feeds install libavahi-compat-libdnssd libuci openssl libnftnl libmnl nftables
    - mv ${CI_PROJECT_DIR}/openwrt_package/config.diff .config
    - mv ${CI_PROJECT_DIR}/openwrt_package ./package/namib
    - mkdir package/namib/src
    - cp -r ${CI_PROJECT_DIR} package/namib/src/namib_enforcer
    - make defconfig
    - make package/namib/compile -j8
  after_script:
    - mkdir ${CI_PROJECT_DIR}/output
    - cp -r /home/build/openwrt/logs/package/namib ${CI_PROJECT_DIR}/output/logs || true
    - cp -r /home/build/openwrt/bin/packages/*/base/namib_0.1.0-*.ipk ${CI_PROJECT_DIR}/output || true
  artifacts:
    paths:
      - output
    when: always

build_image_x86_64:
  extends: .openwrt_image_base
  image: openwrtorg/imagebuilder:x86-64-19.07.7 # - statt _ wie im sdk...
  needs:
    - openwrt_package_x86_64
  variables:
    DNSMASQ_JOB: build_ipk_x86_19.07

build_image_bcm2708:
  extends: .openwrt_image_base
  image: openwrtorg/imagebuilder:brcm2708-bcm2708-19.07.7 # rpi 1
  needs:
    - openwrt_package_bcm2708
  variables:
    DNSMASQ_JOB: build_ipk_bcm2708_19.07
    PROFILE: rpi

build_image_bcm2710:
  extends: .openwrt_image_base
  image: openwrtorg/imagebuilder:brcm2708-bcm2710-19.07.7 # rpi 3
  needs:
    - openwrt_package_bcm2710
  variables:
    DNSMASQ_JOB: build_ipk_bcm2710_19.07
    PROFILE: rpi-3

build_image_bcm2710_snapshot:
  extends: .openwrt_image_base
  image: openwrtorg/imagebuilder@sha256:fefebe6f944034a1f2915458f7ea4422fe23066fc97a6f96b88200d049bb578f # :bcm27xx-bcm2710-snapshot # rpi 3
  needs:
    - openwrt_package_bcm2710_snapshot
  variables:
    DNSMASQ_JOB: build_ipk_bcm2710_snapshot
    PROFILE: rpi-3
    EXTRA_PACKAGES: brcmfmac-firmware-43430-sdio-rpi-3b brcmfmac-firmware-43455-sdio-rpi-3b-plus -cypress-nvram-43430-sdio-rpi-3b -cypress-nvram-43455-sdio-rpi-3b-plus
  allow_failure: true

build_image_bcm2711_snapshot:
  extends: .openwrt_image_base
  image: openwrtorg/imagebuilder@sha256:bf6a044901a5c90c02b519dd5c0eda3619a207ad1379f073f1886d178bc06dc2 # :bcm27xx-bcm2711-snapshot # rpi 4
  needs:
    - openwrt_package_bcm2711_snapshot
  variables:
    DNSMASQ_JOB: build_ipk_bcm2711_snapshot
    PROFILE: rpi-4
  allow_failure: true

.openwrt_image_base:
  stage: imagebuilder
  before_script: []
  only:
    - master
  script:
    - cd /home/build/openwrt
    - cp -r ${CI_PROJECT_DIR}/openwrt_image/files files
    # copy the IPKs created by the needed build jobs
    - mkdir -p packages
    - 'curl -Ssf -o artifacts.zip -H "JOB-TOKEN: $CI_JOB_TOKEN" https://gitlab.informatik.uni-bremen.de/api/v4/projects/namib%2fmud-controller-enforcer%2fdnsmasq/jobs/artifacts/master/download?job=$DNSMASQ_JOB'
    - unzip artifacts.zip && rm artifacts.zip
    - cp openwrt/ipk/dnsmasq-full_*.ipk packages/
    - cp ${CI_PROJECT_DIR}/output/namib_*.ipk packages/
    - grep imagebuilder repositories.conf || echo "src imagebuilder file:packages" >> repositories.conf
    - make _check_keys package_index || true # this is necessary for snapshot
    # build the openwrt image with our packages
    - make image PROFILE=$PROFILE PACKAGES="dnsmasq-full namib luci nano -dnsmasq -odhcpd-ipv6only $EXTRA_PACKAGES" FILES=files
    - mkdir ${CI_PROJECT_DIR}/image
    # x86 puts it under bin, bcm under build_dir ...
    - cp bin/targets/*/*/openwrt-*-combined-*.img.gz ${CI_PROJECT_DIR}/image || true
    - cp build_dir/target-*/linux-*/tmp/openwrt-*-factory.img.gz ${CI_PROJECT_DIR}/image || true
    - cp -r build_dir/target-x86_64_musl/root-x86 ${CI_PROJECT_DIR}/rootfs || true
  artifacts:
    paths:
      - image
      - rootfs

build_openwrt_docker:
  stage: docker
  image: docker
  only:
    - master
  tags:
    - namib
    - privileged
  needs:
    - build_image_x86_64
  before_script: [ ]
  script:
    - mkdir -p ~/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"namib_enforcer\",\"password\":\"$CI_DEPLOY_TOKEN\"}}}" > ~/.docker/config.json
    - docker build . -f openwrt_image/Dockerfile -t gitlab.informatik.uni-bremen.de:5005/namib/mud-controller-enforcer/namib_enforcer
    - docker push gitlab.informatik.uni-bremen.de:5005/namib/mud-controller-enforcer/namib_enforcer